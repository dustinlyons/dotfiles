#+TITLE: Dustin Lyons' emacs configuration
#+OPTIONS: toc:nil h:4
#+CONSTANTS: code_dir_path="~/Projects/Code"

Lcode_dir_pathast exported:  {{{modification-time(%Y-%m-%d %H:%M)}}}

#+TOC: headlines 4

* Configuration   :emacs:
** About this file
This is my emacs config file. Yes, in emacs you can write configuration like a Google Doc and get away with it. It's called [[https://en.wikipedia.org/wiki/Literate_programming]["literate programming"]].

** Personal information
Just me!

#+NAME: personal-info
#+BEGIN_SRC emacs-lisp 
  (setq user-full-name "Dustin Lyons"
    user-mail-address "hello@dustinlyons.co")
#+END_SRC

** Starting up
Here's how we start:

#+NAME: startup
#+BEGIN_SRC emacs-lisp 
  ;; Turn off the splash screen
  (setq inhibit-startup-screen t)
#+END_SRC

** Emacs initialization
*** Add package sources
This associates our package manager with the right source (MELPA).

#+NAME: package-sources
#+BEGIN_SRC emacs-lisp 
  (unless (assoc-default "melpa" package-archives)
    (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t))
  (unless (assoc-default "org" package-archives)
    (add-to-list 'package-archives '("org" . "https://orgmode.org/elpa/") t))
  (unless (assoc-default "nongnu" package-archives)
    (add-to-list 'package-archives '("nongnu" . "https://elpa.nongnu.org/nongnu/") t))
#+END_SRC

*** Packages
Here we install some helpers and begin downloading some core packages.

**** Straight.el
Straight.el fetchs packages over git via use-package.

#+NAME: straight-el
#+BEGIN_SRC emacs-lisp
  ;; use-package package provides common package import functions
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))
  (setq use-package-verbose t)
  (setq use-package-always-ensure t)
  (require 'use-package)

  ;; This sets up straight.el, a git package manager
  (defvar bootstrap-version)
    (let ((bootstrap-file
	 (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
	(bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
	  (url-retrieve-synchronously
	   "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
	   'silent 'inhibit-cookies)
	(goto-char (point-max))
	(eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))

  ;; Tells (use-package) to use straight.el to download packages
  ;; straight.el uses git packages, instead of the default bin files, which we like
  (setq straight-use-package-by-default t)
#+END_SRC

**** Hydra
Hydra enables me drop into quick keybinding modes. See [[https://github.com/abo-abo/hydra][here]].

#+NAME: hydra
#+BEGIN_SRC emacs-lisp
  (use-package hydra)
#+END_SRC

** Keybindings
#+NAME: keybindings
#+BEGIN_SRC emacs-lisp 
  ;; ESC will also cancel/quit/etc.
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)
  (use-package general
    :config
    (general-evil-setup t)
    (general-create-definer dl/leader-keys
      :keymaps '(normal visual emacs)
      :prefix ","))
#+END_SRC

** Display options
*** Themes
Some my own, some from others.

#+NAME: themes
#+BEGIN_SRC emacs-lisp 
  (use-package doom-themes
    :init (load-theme 'doom-rouge t))
#+END_SRC

*** Windows
**** Defaults
Sets some reasonable defaults.

#+NAME: windows-reasonable-defaults
#+BEGIN_SRC emacs-lisp 
  (setq use-dialog-box nil
      use-file-dialog nil
      cursor-type 'bar)
#+END_SRC

**** Display configuration
Turns off the various menu bars, they're quite ugly.

***** Fonts
[[https://sourcefoundry.org/hack/][Hack]] is a code-friendly typeface. I really like it.

#+NAME: fonts
#+BEGIN_SRC emacs-lisp 
  ;; Set the default pitch face
  (set-face-attribute 'default nil :font "Hack" :height 150)

  ;; Set the fixed pitch face
  (set-face-attribute 'fixed-pitch nil
    :font "Hack"
    :weight 'light
    :height 140)

  ;; Set the variable pitch face
  (set-face-attribute 'variable-pitch nil
    :font "SF Pro Display"
    :height 120
    :weight 'light)
#+END_SRC

***** Line numbers
These functions define vim-style relative line numbers.

#+NAME: line-numbers
#+BEGIN_SRC emacs-lisp 
  (global-linum-mode 1)
  (defvar my-linum-current-line-number 0)
  (setq linum-format 'my-linum-relative-line-numbers)

  ;; This fancy function handles the math behind relative line numbers
  (defun my-linum-relative-line-numbers (line-number)
  (let ((y (1+ (- line-number my-linum-current-line-number))))
      (propertize
      (number-to-string
          (cond ((<= y 0) (abs (- y 2))) ((> y 0) y)))
          'face 'linum)))

  (defadvice linum-update (around my-linum-update)
  (let ((my-linum-current-line-number (line-number-at-pos)))
      ad-do-it))

  ;; Turn it on
  (ad-activate 'linum-update)

  ;; Disable line numbers for some modes
  (dolist (mode '(org-mode-hook		
                  term-mode-hook
                  shell-mode-hook
                  eshell-mode-hook))
    (add-hook mode (lambda () (linum-mode 0)))) 
#+END_SRC

***** Toggles
Turn UI things on and off, scale things up and down.

#+NAME: ui-toggles
#+BEGIN_SRC emacs-lisp 
  (defhydra hydra-text-scale (:timeout 4)
    "scale text"
    ("j" text-scale-increase "big")
    ("k" text-scale-decrease "small")
    ("q" nil "quit" :exit t))

  (dl/leader-keys
    "t"  '(:ignore t :which-key "toggles")
    "tt" '(counsel-load-theme :which-key "choose theme")
    "ts" '(hydra-text-scale/body :which-key "scale text"))
#+END_SRC

***** Window minor modes
I like these window related minor modes.

#+NAME: windows-ui-settings
#+BEGIN_SRC emacs-lisp 
  ;; Turn off UI junk
  ;; Note to future self: If you have problems with these later,
  ;; move these into custom file and set variable custom-file
  (column-number-mode)
  (scroll-bar-mode -1)
  (menu-bar-mode -1)
  (tool-bar-mode -1)
#+END_SRC

***** Rainbow delmiters
Makes my lisp parens pretty, and easy to spot.

#+NAME: rainbow-delmiters
#+BEGIN_SRC emacs-lisp 
  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))
#+END_SRC

**** "Powerline"
Keeps info at my fingertips. Modeline is much better than Vim's Powerline (sorry Vim).

#+NAME: modeline
#+BEGIN_SRC emacs-lisp 
  ;; Run M-x all-the-icons-install-fonts to install
  (use-package all-the-icons)
  (use-package doom-modeline
    :ensure t
    :init (doom-modeline-mode 1))
#+END_SRC

** Global modes
I like these modes.

#+NAME: global-modes
#+BEGIN_SRC emacs-lisp 
  (global-visual-line-mode t) ;; Wraps lines everywhere
  (line-number-mode t) ;; Line numbers in the gutter
  (show-paren-mode t) ;; Highlights parans for me
#+END_SRC

** Org mode
*** Package
If you haven't heard of org mode, go watch [[https://www.youtube.com/watch?v=SzA2YODtgK4][this]] talk and come back when you are finished.

#+NAME::org-mode
#+BEGIN_SRC emacs-lisp 
  (defun dl/org-mode-setup ()
    (org-indent-mode)
    (variable-pitch-mode 0)
    (auto-fill-mode 0)
    (visual-line-mode 1)
    (setq evil-auto-indent nil))

  (use-package org
    :defer t
    :hook (org-mode . dl/org-mode-setup)
    :config
    ;; Indent code blocks by 2
    (setq org-edit-src-content-indentation 2
          ;; Prettify the fold indicator
          org-ellipsis " ▾"
          ;; Hide special characters
          org-hide-emphasis-markers t
          ;; Don't start org mode with blocks folded
          org-hide-block-startup nil))

#+END_SRC

*** Visual improvements
Anything related to making org mode pretty.

**** Change default bullets to be pretty
Replaces the standard org-mode header asterisks with dots.
#+NAME::org-mode-visuals
#+BEGIN_SRC emacs-lisp
(use-package org-superstar
  :after org
  :hook (org-mode . org-superstar-mode)
  :custom
    (org-superstar-remove-leading-stars t)
    (org-superstar-headline-bullets-list '("◉" "○" "●" "○" "▷" "▷" "▷")))
#+END_SRC

#+NAME::org-mode-variable-width-fonts
#+BEGIN_SRC emacs-lisp
  ;; Make sure org-indent face is available
  (require 'org-indent)

  ;; Ensure that anything that should be fixed-pitch in Org files appears that way
  (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
  (set-face-attribute 'org-table nil  :inherit 'fixed-pitch)
  (set-face-attribute 'org-formula nil  :inherit 'fixed-pitch)
  (set-face-attribute 'org-code nil   :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-indent nil :inherit '(org-hide fixed-pitch))
  (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
  (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
  (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch)

  ;; Get rid of the background on column views
  (set-face-attribute 'org-column nil :background nil)
  (set-face-attribute 'org-column-title nil :background nil)
#+END_SRC

** Evil mode (Vim)
*** Vim inside emacs
This is what makes emacs possible for me. All evil mode packages and related configuration.

#+NAME: evil-packages
#+BEGIN_SRC emacs-lisp 
  (defun dl/evil-hook ()
    (dolist (mode '(eshell-mode
		    git-rebase-mode
		    term-mode))
    (add-to-list 'evil-emacs-state-modes mode))) ;; no evil mode for these modes

  (use-package evil
    :init
    (setq evil-want-integration t) ;; TODO: research what this does
    (setq evil-want-keybinding nil)
    (setq evil-want-fine-undo 'fine) ;; undo/redo each motion 
    (setq evil-want-Y-yank-to-eol t) ;; Y copies to end of line like vim
    (setq evil-want-C-u-scroll t) ;; vim like scroll up
    :hook (evil-mode . dl/evil-hook)
    :config
    (evil-mode 1)

    ;; Emacs "cancel" == vim "cancel"
    (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
    ;; Ctrl-h deletes in vim insert mode
    (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)
    ;; When we wrap lines, jump visually, not to the "actual" next line
    (evil-global-set-key 'motion "j" 'evil-next-visual-line)
    (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

    (evil-set-initial-state 'message-buffer-mode 'normal)
    (evil-set-initial-state 'dashboard-mode 'normal))

  ;; Gives me vim bindings elsewhere in emacs
  (use-package evil-collection
    :after evil
    :config
    (evil-collection-init))

  ;; Keybindings in org mode
  (use-package evil-org
    :after org
    :hook (org-mode . (lambda () evil-org-mode))
    :config
    (require 'evil-org-agenda)
    (evil-org-agenda-set-keys))

  ;; Branching undo system
  (use-package undo-tree
    :after evil
    :diminish 
    :config
    (evil-set-undo-system 'undo-tree)
    (global-undo-tree-mode 1))

#+END_SRC

** Utility packages
Various helpers.

*** Google
#+BEGIN_SRC emacs-lisp
  ;; You can probably guess
  (use-package google-this
    :config
    (google-this-mode 1))
#+END_SRC

** Managing projects
*** Projectile
Projectile enables me organize projects with a killer grep interface.

#+NAME: projectile
#+BEGIN_SRC emacs-lisp :var code_dir_path=(org-table-get-constant "code_dir_path")
  (use-package projectile
    :diminish projectile-mode
    :config (projectile-mode)
    :custom
	((projectile-completion-system 'ivy))
      :bind-keymap
	("C-c p" . projectile-command-map)
      :init
	(when (file-directory-p code_dir_path)
	(setq projectile-project-search-path '(code_dir_path)))
	  (setq projectile-switch-project-action #'projectile-dired))

  ;; Gives me Ivy options in the Projectile menus
  (use-package counsel-projectile
    :after projectile
    :config (counsel-projectile-mode))
#+END_SRC

** Managing files
*** Fuzzy file finder
File finder and associated helpers that uses the minibuffer (the info window at the bottom).

#+NAME: file-finder
#+BEGIN_SRC emacs-lisp 
  (use-package ivy
    :diminish
    :bind (("C-s" . swiper)
	   :map ivy-minibuffer-map
	   ("TAB" . ivy-alt-done)
	   ("C-f" . ivy-alt-done)
	   ("C-l" . ivy-alt-done)
	   ("C-j" . ivy-next-line)
	   ("C-k" . ivy-previous-line)
	   :map ivy-switch-buffer-map
	   ("C-k" . ivy-previous-line)
	   ("C-l" . ivy-done)
	   ("C-d" . ivy-switch-buffer-kill)
	   :map ivy-reverse-i-search-map
	   ("C-k" . ivy-previous-line)
	   ("C-d" . ivy-reverse-i-search-kill))
    :init
    (ivy-mode 1)
    :config
    (setq ivy-use-virtual-buffers t)
    (setq ivy-wrap t)
    (setq ivy-count-format "(%d/%d) ")
    (setq enable-recursive-minibuffers t))

  (use-package counsel
    :demand t
    :bind (("M-x" . counsel-M-x)
	   ("C-x b" . counsel-ibuffer)
	   ("C-x C-f" . counsel-find-file)
	   ("C-M-j" . counsel-switch-buffer)
	   :map minibuffer-local-map
	   ("C-r" . 'counsel-minibuffer-history))
    :custom
    (counsel-linux-app-format-function #'counsel-linux-app-format-function-name-only)
    :config
    (setq ivy-initial-inputs-alist nil)) ;; Don't start searches with ^
#+END_SRC

** Git
#+NAME: file-finder
#+BEGIN_SRC emacs-lisp 
  (use-package magit
    :commands (magit-status magit-get-current-branch))
    ;;:custom
    ;;(magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))

  (use-package evil-magit
    :after magit)
#+END_SRC

#+RESULTS: file-finder

*** File types
**** Markdown mode
#+NAME::markdown-mode
#+BEGIN_SRC emacs-lisp 
  ;; This uses Github Flavored Markdown for README files
  (use-package markdown-mode
    :commands (markdown-mode gfm-mode)
    :mode (("README\\.md\\'" . gfm-mode)
      ("\\.md\\'" . markdown-mode)
      ("\\.markdown\\'" . markdown-mode))
    :init (setq markdown-command "multimarkdown"))
#+END_SRC

** Learning emacs
These packages may come and go, but ultimately aid in my understanding of emacs and emacslisp.

*** Indent org-babel source blocks
#+BEGIN_SRC emacs-lisp 
  (setq org-src-tab-acts-natively t)
#+END_SRC

*** Show real time key bindings in a seperate buffer
#+NAME: command-log
#+BEGIN_SRC emacs-lisp 
  ;; Gives me a fancy list of commands I run
  (use-package command-log-mode)
  (setq global-command-log-mode t)
  ;; TODO Install package that lets you define help screens for keymaps
#+END_SRC

*** Panel popup to show key bindings
#+NAME: which-key
#+BEGIN_SRC emacs-lisp 
  ;; Gives me a fancy list of commands I run
  (use-package which-key
    :init (which-key-mode)
    :diminish which-key-mode
    :config
    (setq which-key-idle-delay 0.3))
#+END_SRC

*** Helpful documentation strings for common functions
#+NAME: ivy-rich
#+BEGIN_SRC emacs-lisp 
  (use-package ivy-rich
    :init
    (ivy-rich-mode 1))
#+END_SRC

#+NAME: helpful
#+BEGIN_SRC emacs-lisp 
  (use-package helpful
    :custom
    ;; Remap Counsel help functions
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
      :bind
    ;; Remap default help functions
    ([remap describe-function] . helpful-function)
    ([remap describe-symbol] . helpful-symbol)
    ([remap describe-variable] . helpful-variable)
    ([remap describe-command] . helpful-command)
    ([remap describe-key] . helpful-key)) 
#+END_SRC
